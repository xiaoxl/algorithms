


## Clique

now we can use IS is NP-C to show other graph problem instead of using logical problem



## vertex cover is NP-C


::: {#def-}
## Vertex cover
S is a vertex cover if it covers every edge: for every e=(x,y), either x in S or y in S.
:::

vertex cover S of size <=b


## subset-sum
knapsack is NP-C.






Suggested reading:

Chapter 8 in [DPV].

[DPV] Practice Problems. (do not turn in)

[DPV] Problem 8.9 (Hitting Set)

[DPV] Problem 8.10 (a) (Subgraph isomorphism. You are welcome to try them all)

[DPV] Problem 8.19 (Kite)

Graded problem.

Consider the Knapsack-search problem.
Input: integer weights w1,w2,...wn and integer values v1, v2, ..., vn for n items. We are also given a weight capacity W and a goal g.
Output: a subset of items whose total weight is at most W and whose total value is at least g, or report no if such a set does not exist.

Prove that Knapsack-search is NP-complete.



::: {.proof}
Assume that we are given a solution that there are i1 item1, i2 item2, etc.. To check whether it is a solution, we need to check:

- i1w1+i2w2+...+inwn<=W
- i1v1+i2v2+...+invn>=g

Since all the computations are just linear combinations of numbers and comparing two numbers, it is polynomial to check a solution. Therefore Knapsack-serach is NP problem.



:::









## Black box

### SAT

- **input**: m clauses which consists of literals
- **output**: True if there is a satisfying assignment, False if not.

### 3SAT

- **input**: m clauses which consists of at most 3 literals each
- **output**: True if there is a satisfying assignment, False if not.

SAT->3SAT:

a1 v a2 v a3 v ... v ak <-> (a1 v a2 v y1) n (y1b v a3 v y2) n (y2b v a4 v y3) n ... n (y{k-3}b v a{k-1} v ak)


### Independent Set (IS)
def: vertices are not connnected directly by edges from G

input: undirected G output: indepedent set S with maximal size


- **input**: undirected G
- **output**: indepedent set S with maximal size

- independent set

def: vertices are not connnected directly by edges from G

input: undirected G
output: indepedent set S with maximal size

not NP?


for all optimization problem: 
1. to check whether it is NP, we need be able to verify something is maximal, which in general is impossible.
2. In general a way to verify something is maximal is to construct a maximal answer, and compare the size. 
3. Using this idea, if this problem is NP, it should also be in P.
4. So unless NP=P, optimization problems are hard to be NP.



- search problem

input: undirected G and goal g
output: independent set S with size >=g


Thm: this is NP-C.

proof:

1. NP: easy
2. 3SAT->IS (g=#clause)

IS g is the number of clauses. 

connect all nodes that cannot be true simutanously, like x and xb





is->max-is

so max-is is NP-hard: any NP can be reduced to it but not necessarily in NP




### Vertex Cover (VC)

- **input**: G, k
- **output**: a subset C of at most k vertices that every edge has at least one endpoint in C

1. VC may have edges inside
2. V-C has to be independent. Otherwise if there is an edge in V-C, this edge doesn't have endpoints in C
3. a VC with at most k vertices is equivalent to an IS with at least v-k vertices.


### Clique

- **input**: G, k
- **output**: a subset C of at least k vertices that every vertices is connected by an edge

1. Clique has to be connected (by the graph edge)
2. a clique is an IS in the completement graph
3. a Clique with at least k vertices is equivalent to an IS with at least k vertices.

### 3D Matching

- **input**: XxYxZ
- **output**: a subset M such that each element in X, Y or Z appears in at most one element of M




### Subset Sum (SSS)

- **input**: a set of integers S and a target integer T
- **output**: a subset of integers in S whose sum is T.




3sat->SSS->knapsack-search



### Rudrata (s, t)-Path


- **input**: a graph
- **output**: a path that passes through each vertex exactly once which starts from s and ends at t.



### Rudrata Cycle


- **input**: a graph
- **output**: a cycle that passes through each vertex exactly once


RP->RC




### Zero-One Equations (ZOE)

- **input**: AX=1, where A is either 1 or 0
- **output**: an integer solution




### Integer Linear Programming (ILP)

- **input**: AX<=b, where A, b are all integers
- **output**: an non-negative integer solution


ZOE->ILP


### Knapsack



### Traveling Salesman Problem (TSP)

- **input**: A mstrix of distances; a budget b
- **output**: A tour which passes throguh all the cities and has length <=b, if such a tour exists

### Traveling Salesman Problem optimization version (TSP-OPT)

- **input**: A mstrix of distances
- **output**: A shortest tour which passes throguh all the cities 







- search version: find the optimal one
- decision version: find the one with condidtions

knapsack-decision -> knapsack