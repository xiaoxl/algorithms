# independent set

def: vertices are not connnected directly by edges from G

input: undirected G
output: indepedent set S with maximal size

not NP?


for all optimization problem: 
1. to check whether it is NP, we need be able to verify something is maximal, which in general is impossible.
2. In general a way to verify something is maximal is to construct a maximal answer, and compare the size. 
3. Using this idea, if this problem is NP, it should also be in P.
4. So unless NP=P, optimization problems are hard to be NP.



## search problem

input: undirected G and goal g
output: independent set S with size >=g


Thm: this is NP-C.

proof:

1. NP: easy
2. 3SAT->IS


is->max-is

so max-is is NP-hard: any NP can be reduced to it but not necessarily in NP




## Clique

now we can use IS is NP-C to show other graph problem instead of using logical problem



## vertex cover is NP-C


::: {#def-}
## Vertex cover
S is a vertex cover if it covers every edge: for every e=(x,y), either x in S or y in S.
:::

vertex cover S of size <=b


## subset-sum
knapsack is NP-C.






Suggested reading:

Chapter 8 in [DPV].

[DPV] Practice Problems. (do not turn in)

[DPV] Problem 8.9 (Hitting Set)

[DPV] Problem 8.10 (a) (Subgraph isomorphism. You are welcome to try them all)

[DPV] Problem 8.19 (Kite)

Graded problem.

Consider the Knapsack-search problem.
Input: integer weights w1,w2,...wn and integer values v1, v2, ..., vn for n items. We are also given a weight capacity W and a goal g.
Output: a subset of items whose total weight is at most W and whose total value is at least g, or report no if such a set does not exist.

Prove that Knapsack-search is NP-complete.



::: {.proof}
Assume that we are given a solution that there are i1 item1, i2 item2, etc.. To check whether it is a solution, we need to check:

- i1w1+i2w2+...+inwn<=W
- i1v1+i2v2+...+invn>=g

Since all the computations are just linear combinations of numbers and comparing two numbers, it is polynomial to check a solution. Therefore Knapsack-serach is NP problem.



:::